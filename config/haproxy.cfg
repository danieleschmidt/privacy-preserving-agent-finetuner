# HAProxy Configuration for Privacy-Preserving Agent Finetuner
# Production-ready load balancer with high availability, security, and monitoring

global
    # Process management
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # Performance tuning
    maxconn 4096
    nbproc 1
    nbthread 4
    
    # Logging
    log stdout local0 info
    log-tag haproxy-privacy-finetuner
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE+aRSA+AESGCM:ECDHE+aRSA+SHA384:ECDHE+aRSA+SHA256:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+aRSA+AESGCM:ECDHE+aRSA+SHA384:ECDHE+aRSA+SHA256:!aNULL:!MD5:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Security
    chroot /var/lib/haproxy
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s
    
    # Tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 8192

defaults
    # Mode and options
    mode http
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10000ms
    timeout http-keep-alive 2000ms
    
    # Retries and health checks
    retries 3
    option httpchk GET /health
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json
    
    # Error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Frontend for HTTP traffic
frontend privacy_finetuner_http
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Redirect HTTP to HTTPS (uncomment if using HTTPS)
    # redirect scheme https if !{ ssl_fc }
    
    # Health check endpoint
    acl is_health_check path /health
    http-request use-service prometheus-exporter if { path /metrics }
    
    # Route to backend
    default_backend privacy_finetuner_servers

# Frontend for HTTPS traffic (uncomment if using HTTPS)
# frontend privacy_finetuner_https
#     bind *:443 ssl crt /etc/ssl/certs/privacy-finetuner.pem
#     
#     # Security headers
#     http-response set-header X-Frame-Options DENY
#     http-response set-header X-Content-Type-Options nosniff
#     http-response set-header X-XSS-Protection "1; mode=block"
#     http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
#     http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
#     
#     # Rate limiting
#     stick-table type ip size 100k expire 30s store http_req_rate(10s)
#     http-request track-sc0 src
#     http-request deny if { sc_http_req_rate(0) gt 20 }
#     
#     # Route to backend
#     default_backend privacy_finetuner_servers

# Backend servers
backend privacy_finetuner_servers
    # Load balancing algorithm
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Session persistence (optional)
    cookie SERVERID insert indirect nocache
    
    # Server definitions
    server app1 privacy-finetuner-app-1:8080 \
        check inter 5000ms rise 2 fall 3 \
        cookie app1 \
        maxconn 500 \
        weight 100
    
    server app2 privacy-finetuner-app-2:8080 \
        check inter 5000ms rise 2 fall 3 \
        cookie app2 \
        maxconn 500 \
        weight 100
    
    # Backup server (optional)
    # server backup privacy-finetuner-backup:8080 backup

# Statistics and monitoring
listen stats
    bind *:8404
    
    # Authentication (change credentials)
    stats auth admin:${HAPROXY_STATS_PASSWORD:-secure_password}
    
    # Statistics configuration
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats show-legends
    stats show-desc "Privacy-Preserving Agent Finetuner Load Balancer"
    
    # Admin interface
    stats admin if TRUE
    
    # Prometheus metrics
    http-request use-service prometheus-exporter if { path /metrics }

# Cache configuration (optional)
cache privacy_cache
    total-max-size 256
    max-object-size 10240
    max-age 300

# Resolvers for service discovery (if using Docker Swarm or Kubernetes)
resolvers docker
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry 1s
    hold other 10s
    hold refused 10s
    hold nx 10s
    hold timeout 10s
    hold valid 10s
    hold obsolete 10s

# Global error handling
global
    # Custom error pages
    stats socket /var/run/haproxy.sock mode 600 level admin
    
    # Lua scripts for advanced processing (if needed)
    # lua-load /usr/local/etc/haproxy/scripts/auth.lua
    # lua-load /usr/local/etc/haproxy/scripts/ratelimit.lua

# Advanced features for production

# Rate limiting per user/session
backend rate_limit_backend
    stick-table type ip size 100k expire 60s store http_req_rate(10s)

# Geographic filtering (example)
frontend privacy_finetuner_geo
    bind *:80
    
    # Block certain countries (example - customize as needed)
    acl blocked_countries src -f /usr/local/etc/haproxy/blocked_countries.txt
    http-request deny if blocked_countries
    
    default_backend privacy_finetuner_servers

# API versioning support
frontend api_versioning
    bind *:80
    
    # Route API v1 requests
    acl is_api_v1 path_beg /api/v1/
    use_backend privacy_finetuner_v1 if is_api_v1
    
    # Route API v2 requests
    acl is_api_v2 path_beg /api/v2/
    use_backend privacy_finetuner_v2 if is_api_v2
    
    # Default backend
    default_backend privacy_finetuner_servers

# Version-specific backends (example)
backend privacy_finetuner_v1
    balance roundrobin
    server app1-v1 privacy-finetuner-app-1:8080 check
    server app2-v1 privacy-finetuner-app-2:8080 check

backend privacy_finetuner_v2
    balance roundrobin
    server app1-v2 privacy-finetuner-app-1:8080 check
    server app2-v2 privacy-finetuner-app-2:8080 check

# Maintenance mode
backend maintenance
    mode http
    errorfile 503 /usr/local/etc/haproxy/errors/maintenance.http

# Circuit breaker pattern (advanced)
backend privacy_finetuner_circuit_breaker
    balance roundrobin
    
    # Server with circuit breaker logic
    server app1 privacy-finetuner-app-1:8080 \
        check inter 2000ms rise 2 fall 5 \
        on-error mark-down \
        error-limit 10 \
        observe layer7
    
    server app2 privacy-finetuner-app-2:8080 \
        check inter 2000ms rise 2 fall 5 \
        on-error mark-down \
        error-limit 10 \
        observe layer7