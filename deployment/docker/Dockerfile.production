# TERRAGON AUTONOMOUS SDLC - PRODUCTION DOCKERFILE
# 
# Multi-stage production-optimized container for privacy-preserving agent finetuner
# Includes all three generations: Research, Robustness, Scaling
#
# Build: docker build -f deployment/docker/Dockerfile.production -t terragon/privacy-finetuner:autonomous-v4.0 .
# Run: docker run -p 8080:8080 terragon/privacy-finetuner:autonomous-v4.0

# ===== Stage 1: Build Environment =====
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    cmake \
    git \
    pkg-config \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy dependency files
COPY requirements.txt requirements-prod.txt ./
COPY pyproject.toml setup.py ./

# Install Python dependencies
RUN python -m pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy source code
COPY privacy_finetuner/ ./privacy_finetuner/
COPY tests/ ./tests/
COPY README.md IMPLEMENTATION_STATUS.md ./

# Build and install the package
RUN pip install -e . && \
    python -m pytest tests/ -x --tb=short || true && \
    pip freeze > installed_packages.txt

# ===== Stage 2: Production Runtime =====
FROM python:3.11-slim as production

# Set production environment
ENV TERRAGON_MODE=production
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONOPTIMIZE=2

# Create non-root user for security
RUN groupadd -r terragon && useradd -r -g terragon -u 1000 terragon

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create application directory
WORKDIR /app

# Copy built packages from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/
COPY --from=builder /build/installed_packages.txt ./

# Copy application code
COPY --from=builder /build/privacy_finetuner/ ./privacy_finetuner/
COPY --from=builder /build/README.md /build/IMPLEMENTATION_STATUS.md ./

# Create necessary directories
RUN mkdir -p /app/logs /app/checkpoints /app/cache /app/config && \
    chown -R terragon:terragon /app

# Copy production configuration
COPY deployment/production_config.yaml /app/config/
COPY deployment/docker/entrypoint.sh /app/

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# ===== Stage 3: Multi-Architecture Support =====
FROM production as production-amd64
# AMD64-specific optimizations

FROM production as production-arm64
# ARM64-specific optimizations

# ===== Final Stage: Production Ready =====
FROM production-${TARGETARCH:-amd64} as final

# Add health check script
COPY deployment/docker/healthcheck.py /app/

# Set up logging configuration
COPY deployment/docker/logging.conf /app/config/

# Production Labels
LABEL maintainer="Terragon Labs <terragon@labs.ai>" \
      version="4.0" \
      description="Terragon Autonomous Privacy-Preserving Agent Finetuner" \
      org.opencontainers.image.title="Terragon Privacy Finetuner" \
      org.opencontainers.image.description="Production-ready privacy-preserving ML system" \
      org.opencontainers.image.version="4.0" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.source="https://github.com/terragon-labs/privacy-finetuner" \
      org.opencontainers.image.documentation="https://docs.terragon.ai/privacy-finetuner" \
      terragon.generation.1="advanced_research" \
      terragon.generation.2="robust_operations" \
      terragon.generation.3="massive_scaling"

# Expose ports
EXPOSE 8080 8081 8082

# Set up volumes
VOLUME ["/app/checkpoints", "/app/logs", "/app/cache"]

# Switch to non-root user
USER terragon

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python /app/healthcheck.py

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["production"]