[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "privacy-preserving-agent-finetuner"
version = "0.1.0"
description = "Enterprise-grade framework for fine-tuning LLMs with differential privacy guarantees"
authors = ["Daniel Schmidt <daniel@terragon-labs.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/terragon-labs/privacy-preserving-agent-finetuner"
repository = "https://github.com/terragon-labs/privacy-preserving-agent-finetuner"
documentation = "https://docs.terragon-labs.com/privacy-finetuner"
keywords = ["privacy", "differential-privacy", "llm", "fine-tuning", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security :: Cryptography",
]

[tool.poetry.dependencies]
python = "^3.9"
torch = "^2.1.0"
transformers = "^4.35.0"
opacus = "^1.4.0"
peft = "^0.7.0"
accelerate = "^0.24.0"
datasets = "^2.14.0"
numpy = "^1.24.0"
scipy = "^1.11.0"
scikit-learn = "^1.3.0"
pandas = "^2.1.0"
pydantic = "^2.5.0"
typer = "^0.9.0"
rich = "^13.7.0"
cryptography = "^41.0.0"
redis = "^5.0.0"
prometheus-client = "^0.19.0"
pyyaml = "^6.0.1"
jinja2 = "^3.1.0"
psutil = "^5.9.0"
requests = "^2.31.0"
aiohttp = "^3.9.0"
uvicorn = "^0.24.0"
fastapi = "^0.104.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
bandit = "^1.7.0"
safety = "^2.3.0"
coverage = "^7.3.0"
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
moto = "^4.2.0"
factory-boy = "^3.3.0"
faker = "^20.1.0"
hypothesis = "^6.92.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocs-mermaid2-plugin = "^1.1.0"
mkdocstrings = "^0.24.0"

[tool.poetry.scripts]
privacy-finetuner = "privacy_finetuner.cli:app"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "opacus.*",
    "torch.*",
    "transformers.*",
    "peft.*",
    "accelerate.*",
    "datasets.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=privacy_finetuner",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "privacy: Privacy guarantee tests",
    "slow: Slow-running tests",
    "gpu: Tests requiring GPU",
]

[tool.coverage.run]
source = ["privacy_finetuner"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "S311"]