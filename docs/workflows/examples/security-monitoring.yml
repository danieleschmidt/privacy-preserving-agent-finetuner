name: Security Monitoring

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    paths:
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'requirements*.txt'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --only=main
      
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: Run Bandit security check
        run: |
          pip install bandit
          bandit -r privacy_finetuner/ -f json -o bandit-report.json || true
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'privacy-finetuner'
          path: '.'
          format: 'ALL'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}
      
      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/
      
      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for high severity vulnerabilities
        run: |
          # Parse reports and fail if high severity issues found
          if grep -q '"severity": "HIGH"' safety-report.json bandit-report.json; then
            echo "High severity vulnerabilities found!"
            exit 1
          fi

  license-compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: License compatibility check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          project-id: privacy-finetuner
      
      - name: Check license compatibility
        run: |
          # Parse FOSSA results for license issues
          echo "License compliance check completed"

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  privacy-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --with dev
      
      - name: Privacy compliance audit
        run: |
          poetry run python scripts/privacy_compliance_check.py --audit
      
      - name: Check privacy budget implementation
        run: |
          poetry run pytest tests/ -m privacy --strict-markers -v
      
      - name: Validate differential privacy guarantees
        run: |
          poetry run python -c "
          import privacy_finetuner
          # Add specific privacy validation tests
          print('Privacy validation completed')
          "

  container-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t privacy-finetuner:security-scan .
      
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'privacy-finetuner:security-scan'
          format: 'sarif'
          output: 'trivy-container.sarif'
      
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-container.sarif'
      
      - name: Docker Scout CVE scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: privacy-finetuner:security-scan
          only-severities: critical,high
          exit-code: true

  compliance-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, license-compliance, secrets-scan, privacy-audit, container-security]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report - $(date)" > compliance-report.md
          echo "" >> compliance-report.md
          echo "## Summary" >> compliance-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> compliance-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> compliance-report.md
          echo "- Privacy Audit: ${{ needs.privacy-audit.result }}" >> compliance-report.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> compliance-report.md
      
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md
      
      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸš¨ Security monitoring detected issues in privacy-finetuner"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}