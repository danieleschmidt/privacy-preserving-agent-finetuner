apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: privacy-finetuner-ingress
  namespace: privacy-finetuner
  labels:
    app: privacy-finetuner
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10g"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "100"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'";
    
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "ewma"
    nginx.ingress.kubernetes.io/upstream-hash-by-subset: "true"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://privacy-finetuner.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: http01
    
    # AWS ALB annotations (alternative to NGINX)
    # kubernetes.io/ingress.class: "alb"
    # alb.ingress.kubernetes.io/scheme: "internet-facing"
    # alb.ingress.kubernetes.io/target-type: "ip"
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: "443"
    # alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:region:account:certificate/cert-id"

spec:
  ingressClassName: nginx
  
  tls:
  - hosts:
    - privacy-finetuner.example.com
    - api.privacy-finetuner.example.com
    - metrics.privacy-finetuner.example.com
    secretName: privacy-finetuner-tls
  
  rules:
  - host: privacy-finetuner.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: privacy-finetuner-master
            port:
              number: 8080
      
      - path: /api/v1/train
        pathType: Prefix
        backend:
          service:
            name: privacy-finetuner-workers
            port:
              number: 8080
      
      - path: /api/v1/inference
        pathType: Prefix
        backend:
          service:
            name: privacy-finetuner-workers
            port:
              number: 8080
  
  - host: api.privacy-finetuner.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: privacy-finetuner-loadbalancer
            port:
              number: 80
  
  - host: metrics.privacy-finetuner.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: privacy-finetuner-metrics
            port:
              number: 9090

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@privacy-finetuner.example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                kubernetes.io/os: linux

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: privacy-finetuner-cert
  namespace: privacy-finetuner
spec:
  secretName: privacy-finetuner-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - privacy-finetuner.example.com
  - api.privacy-finetuner.example.com
  - metrics.privacy-finetuner.example.com