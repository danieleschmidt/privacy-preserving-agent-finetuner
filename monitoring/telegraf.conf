# Telegraf configuration for Privacy-Preserving Agent Fine-Tuner
# Optimized for privacy-focused metrics collection

[global_tags]
  service = "privacy-finetuner"
  environment = "${ENVIRONMENT:development}"
  datacenter = "${DATACENTER:local}"

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
  debug = false
  quiet = false
  logfile = "/var/log/telegraf/telegraf.log"

# Output plugins
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUXDB_TOKEN}"
  organization = "privacy-org"
  bucket = "privacy-metrics"
  timeout = "5s"
  user_agent = "telegraf"
  content_encoding = "gzip"

[[outputs.prometheus_client]]
  listen = ":9273"
  metric_version = 2
  export_timestamp = true
  collectors_exclude = ["gocollector", "process"]

# Input plugins for system metrics
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
  core_tags = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
  mount_points = ["/", "/data", "/models"]

[[inputs.diskio]]
  devices = ["sda", "sdb", "nvme0n1"]
  skip_serial_number = true

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]
  fielddrop = ["uptime_format"]

[[inputs.net]]
  interfaces = ["eth0", "eth1", "en*"]
  ignore_protocol_stats = false

[[inputs.netstat]]

# Docker metrics
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = ["*privacy*"]
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false
  docker_label_include = ["com.docker.compose.service"]
  docker_label_exclude = []
  tag_env = ["ENVIRONMENT"]

# NVIDIA GPU metrics (if available)
[[inputs.nvidia_smi]]
  timeout = "5s"
  [inputs.nvidia_smi.tagdrop]
    gpu_name = ["Tesla*"]

# Redis metrics for privacy budget tracking
[[inputs.redis]]
  servers = ["tcp://redis-monitoring:6379"]
  password = ""
  pool_size = 3
  tls_ca = ""
  tls_cert = ""
  tls_key = ""
  insecure_skip_verify = false

# PostgreSQL metrics
[[inputs.postgresql]]
  address = "postgres://privacy:privacy@postgres:5432/privacy_finetuner?sslmode=disable"
  max_lifetime = "0s"
  databases = ["privacy_finetuner"]

# HTTP response monitoring
[[inputs.http_response]]
  urls = [
    "http://privacy-finetuner:8080/health",
    "http://privacy-finetuner:8080/metrics",
    "http://privacy-finetuner:8080/api/v1/status"
  ]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false
  [inputs.http_response.headers]
    Accept = "application/json"
    User-Agent = "telegraf-health-check"

# Privacy-specific metrics via HTTP
[[inputs.http]]
  name_override = "privacy_metrics"
  urls = [
    "http://privacy-finetuner:8080/metrics/privacy"
  ]
  timeout = "5s"
  method = "GET"
  headers = {
    "Accept" = "application/json",
    "Authorization" = "Bearer ${PRIVACY_METRICS_TOKEN}"
  }
  data_format = "json"
  json_name_key = "metric_name"
  json_string_fields = ["session_id", "user_id", "model_name"]
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"

# Log parsing for structured metrics
[[inputs.tail]]
  files = ["/var/log/privacy-finetuner/metrics.log"]
  from_beginning = false
  pipe = false
  watch_method = "inotify"
  data_format = "json"
  json_name_key = "metric"
  json_string_fields = ["level", "component", "session_id"]
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05.000Z"
  tag_keys = ["level", "component"]

# JVM metrics (if running Java components)
[[inputs.jolokia2_agent]]
  urls = ["http://privacy-finetuner:8080/jolokia"]
  name_prefix = "jvm_"
  username = ""
  password = ""
  response_timeout = "5s"

  [[inputs.jolokia2_agent.metric]]
    name  = "memory"
    mbean = "java.lang:type=Memory"
    paths = ["HeapMemoryUsage", "NonHeapMemoryUsage"]

  [[inputs.jolokia2_agent.metric]]
    name  = "garbage_collector"
    mbean = "java.lang:name=*,type=GarbageCollector"
    paths = ["CollectionTime", "CollectionCount"]
    tag_keys = ["name"]

# Custom privacy metrics processor
[[processors.regex]]
  namepass = ["privacy_metrics"]
  
  [[processors.regex.tags]]
    key = "session_id"
    pattern = "^(.{8}).*"
    replacement = "${1}***"
  
  [[processors.regex.tags]]
    key = "user_id"
    pattern = "^(.{4}).*"
    replacement = "${1}***"

# Metric filtering for privacy
[[processors.strings]]
  namepass = ["*"]
  
  [[processors.strings.replace]]
    measurement = "*"
    old = "user_id"
    new = "user_hash"
  
  [[processors.strings.replace]]
    measurement = "*"
    old = "email"
    new = "email_hash"

# Aggregation for privacy budget metrics
[[aggregators.minmax]]
  period = "30s"
  drop_original = false
  namepass = ["privacy_budget_*"]

[[aggregators.histogram]]
  period = "60s"
  drop_original = false
  namepass = ["privacy_compute_duration", "training_latency"]
  buckets = [0.1, 0.5, 1.0, 2.5, 5.0, 10.0]

# Service discovery for dynamic environments
[[inputs.consul]]
  address = "consul:8500"
  scheme = "http"
  username = ""
  password = ""
  datacenters = ["dc1"]
  tag_delimiter = ":"
  metric_version = 2
  services = ["privacy-finetuner"]

# Kubernetes metrics (if deployed on k8s)
[[inputs.kube_inventory]]
  url = "https://kubernetes.default.svc"
  bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  insecure_skip_verify = true
  namespace = "privacy-finetuner"
  resource_include = ["pods", "services", "deployments"]
  resource_exclude = ["secrets", "configmaps"]

# Log file monitoring
[[inputs.logparser]]
  files = ["/var/log/privacy-finetuner/errors.log"]
  from_beginning = false
  
  [inputs.logparser.grok]
    patterns = ["%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}"]
    measurement = "privacy_errors"
    timezone = "UTC"
    
  [[inputs.logparser.grok.tags]]
    level = "{{.level}}"

# Heartbeat monitoring
[[inputs.internal]]
  collect_memstats = false
